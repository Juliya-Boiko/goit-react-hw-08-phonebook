{"version":3,"file":"static/js/121.c3cae9c6.chunk.js","mappings":"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","sources":["redux/contacts/cont-selectors.js","components/EditContactForm/EditContactForm.jsx","components/Modal/Modal.jsx","components/Contact/Contact.jsx","components/ContactsList/ContactsList.jsx","components/AddContactForm/AddContactForm.jsx","pages/Contacts.jsx"],"sourcesContent":["export const getItems = state => state.contacts.items;","import { Form, Formik } from \"formik\";\n\nexport const EditContactForm = ({item, onSubmit}) => {\n  return (\n    <Formik\n      initialValues={{ name: item.name, number: item.number }}\n      onSubmit={onSubmit}\n    >\n      {props => (\n        <Form>\n          <label htmlFor=\"name\">Name</label>\n          <input\n            id=\"name\"\n            type=\"text\"\n            name=\"name\"\n            onChange={props.handleChange}\n            value={props.values.name} />\n          <label htmlFor=\"password\">Number</label>\n          <input\n            id=\"number\"\n            type=\"text\"\n            name=\"number\"\n            onChange={props.handleChange}\n            value={props.values.number} />\n          <button type=\"submit\">EDIT CONTACT</button>\n        </Form>\n      )}\n    </Formik>\n  );\n};","import { useDispatch } from \"react-redux\";\nimport { Navigate } from \"react-router\";\nimport { editContactAsync } from \"redux/contacts/cont-operations\";\nimport { EditContactForm } from \"components/EditContactForm/EditContactForm\";\n\nexport const Modal = ({ item, onClose }) => {\n  const dispatch = useDispatch();\n\n  const submitHandler = (values) => {\n    const contact = {\n      id: item.id,\n      name: values.name,\n      number: values.number,\n    };\n    dispatch(editContactAsync(contact));\n    onClose();\n    <Navigate to=\"/contacts\" />\n  };\n\n  return (\n    <div>\n      <EditContactForm item={item} onSubmit={submitHandler} />\n      <button type=\"button\" onClick={onClose}>\n        Close modal\n      </button>\n    </div>\n  );\n}\n\n// export const Modal = ({ onClose, src }) => {\n//   useEffect(() => {\n//     const handleKeyDown = e => {\n//       if (e.code === 'Escape') {\n//         onClose();\n//       }\n//     };\n\n//     window.addEventListener('keydown', handleKeyDown);\n//     return () => {\n//       window.removeEventListener('keydown', handleKeyDown);\n//     };\n//   }, [onClose]);\n\n//   const handleBackdropClick = e => {\n//     if (e.target === e.currentTarget) {\n//       onClose();\n//     }\n//   };\n\n//   return (\n//     <ModalBackdrop onClick={handleBackdropClick}>\n//       <ModalImg src={src} alt=\"\" />\n//     </ModalBackdrop>\n//   );\n// };","import { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { Modal } from \"components/Modal/Modal\";\nimport { deleteContactAsync } from \"redux/contacts/cont-operations\";\n\nexport const Contact = ({ item }) => { \n  const dispatch = useDispatch();\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  \n  const openModal = () => {\n    setIsModalOpen(true);\n  };\n\n  const closeModal = () => {\n    setIsModalOpen(false);\n  };\n\n  const deleteContact = id => {\n    dispatch(deleteContactAsync(id));\n  };\n\n  return (\n    <div>\n      {item.name}: {item.number}\n      <button type=\"button\" onClick={openModal}>Edit</button>\n      <button type=\"button\" onClick={() => deleteContact(item.id)}>Delete</button>\n      {isModalOpen && <Modal item={item} onClose={closeModal} />}\n    </div>\n  );\n};","import { useSelector, useDispatch } from \"react-redux\";\nimport { getAllContactsAsync } from \"redux/contacts/cont-operations\";\nimport { useEffect } from \"react\";\nimport { getItems } from \"redux/contacts/cont-selectors\";\nimport { Contact } from \"components/Contact/Contact\";\n\nexport const ContactsList = () => {\n    const dispatch = useDispatch();\n    const items = useSelector(getItems);\n\n  useEffect(() => {\n    dispatch(getAllContactsAsync());\n  }, [dispatch]);\n\n  return (\n    <ul>\n      {items.map((item) => {\n        return (\n          <li key={item.id}>\n            <Contact item={item} />\n          </li>\n        );\n      })}\n    </ul>\n  );\n};","import { Form, Formik } from \"formik\";\n\nexport const AddContactForm = ({ onSubmit }) => { \n  return (\n    <Formik\n      initialValues={{ name: '', number: '' }}\n      onSubmit={onSubmit}\n    >\n      {props => (\n        <Form>\n          <label htmlFor=\"name\">Name</label>\n          <input\n            id=\"name\"\n            type=\"text\"\n            name=\"name\"\n            onChange={props.handleChange}\n            value={props.values.name} />\n          <label htmlFor=\"password\">Number</label>\n          <input\n            id=\"number\"\n            type=\"text\"\n            name=\"number\"\n            onChange={props.handleChange}\n            value={props.values.number} />\n          <button type=\"submit\">ADD NEW CONTACT</button>\n        </Form>\n      )}\n    </Formik>\n  );\n};","import { ContactsList } from \"components/ContactsList/ContactsList\";\nimport { useDispatch } from \"react-redux\";\nimport { addNewContactAsync } from \"redux/contacts/cont-operations\";\nimport { AddContactForm } from \"components/AddContactForm/AddContactForm\";\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  \n  const submitHandler = (values, { resetForm }) => {\n    const contact = {\n      name: values.name,\n      number: values.number,\n    }\n    dispatch(addNewContactAsync(contact));\n    resetForm();\n  }\n\n  return (\n    <div>\n    <p>CONTACTS PAGE</p>\n      <AddContactForm onSubmit={submitHandler}/>\n      <ContactsList />\n    </div>\n  );\n};\n\nexport default Contacts;"],"names":["getItems","state","contacts","items","EditContactForm","item","onSubmit","initialValues","name","number","props","htmlFor","id","type","onChange","handleChange","value","values","Modal","onClose","dispatch","useDispatch","contact","editContactAsync","onClick","Contact","useState","isModalOpen","setIsModalOpen","deleteContactAsync","ContactsList","useSelector","useEffect","getAllContactsAsync","map","AddContactForm","resetForm","addNewContactAsync"],"sourceRoot":""}