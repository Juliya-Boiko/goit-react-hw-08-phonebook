{"version":3,"file":"static/js/915.7d7e9faf.chunk.js","mappings":"yMAGaA,GAAWC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,6I,sECDRE,E,QAAYF,GAAAA,EAAH,mFAGX,SAAAG,GAAC,OAAIA,EAAEC,MAAMC,OAAOC,KAAnB,G,sECHCC,E,QAAQP,GAAAA,MAAH,yOAOI,SAAAG,GAAC,OAAIA,EAAEC,MAAMC,OAAOC,KAAnB,G,sECPVE,E,QAAYR,GAAAA,GAAH,gHAEL,SAAAG,GAAC,OAAIA,EAAEC,MAAMK,WAAWC,IAAvB,G,sECFLC,E,QAAgBX,GAAAA,IAAH,gJ,qECAbY,EAAW,WACtB,IAAMC,GAAcC,EAAAA,EAAAA,MAGpB,MAAO,EAFUC,EAAAA,EAAAA,MAECF,EACnB,C,qMCGYG,EAAe,WAC1B,OAAmBJ,EAAAA,EAAAA,KAAZK,GAAP,eAYA,OACE,SAAC,KAAD,CACEC,cAAe,CAAEC,KAAM,GAAIC,MAAO,GAAIC,SAAU,IAChDC,SAbkB,SAACC,GACrB,IAAMC,EAAO,CACXL,KAAMI,EAAOJ,KACbC,MAAOG,EAAOH,MACdC,SAAUE,EAAOF,UAEnBJ,GAASQ,EAAAA,EAAAA,IAAaD,IACrB,IACF,EAMGE,iBAAkBC,EAAAA,GAHpB,SAKG,SAAAC,GAAK,OACJ,UAAC,IAAD,YACE,SAAC,EAAAC,EAAD,CACEC,KAAK,OACLX,KAAK,OACLY,YAAY,OACZC,SAAUJ,EAAMK,aAChBC,MAAON,EAAML,OAAOJ,QACtB,SAAC,KAAD,CAAcA,KAAK,OAAOgB,OAAQ,SAAAC,GAAG,OAAI,SAAC,IAAD,UAAYA,GAAhB,KACrC,SAAC,EAAAP,EAAD,CACEC,KAAK,OACLX,KAAK,QACLY,YAAY,QACZC,SAAUJ,EAAMK,aAChBC,MAAON,EAAML,OAAOH,SACtB,SAAC,KAAD,CAAcD,KAAK,QAAQgB,OAAQ,SAAAC,GAAG,OAAI,SAAC,IAAD,UAAYA,GAAhB,KACtC,SAAC,EAAAP,EAAD,CACEC,KAAK,WACLX,KAAK,WACLY,YAAY,WACZC,SAAUJ,EAAMK,aAChBC,MAAON,EAAML,OAAOF,YACtB,SAAC,KAAD,CAAcF,KAAK,WAAWgB,OAAQ,SAAAC,GAAG,OAAI,SAAC,IAAD,UAAYA,GAAhB,KACzC,SAAC,IAAD,CAAeN,KAAK,SAApB,wBAvBE,GA4BX,EC5CD,EATiB,WACf,OACE,UAAC,IAAD,YACE,SAAC,IAAD,oEACA,SAACd,EAAD,MAGL,C,sHCTYqB,EAAgBC,EAAAA,KAAaC,MAAM,CAC9CpB,KAAMmB,EAAAA,KAAaE,IAAI,GAAGC,WAC1BC,OAAQJ,EAAAA,KAAaK,OAAO,IAAIF,aAGrBd,EAAiBW,EAAAA,KAAaC,MAAM,CAC/CpB,KAAMmB,EAAAA,KAAaE,IAAI,GAAGC,WAC1BrB,MAAOkB,EAAAA,KAAalB,QAAQqB,WAC5BpB,SAAUiB,EAAAA,KAAaE,IAAI,GAAGC,aAGnBG,EAAYN,EAAAA,KAAaC,MAAM,CAC1CnB,MAAOkB,EAAAA,KAAalB,QAAQqB,WAC5BpB,SAAUiB,EAAAA,KAAaE,IAAI,GAAGC,Y","sources":["components/common/AuthForm.styled.js","components/common/ErrorText.styled.js","components/common/Input.styled..js","components/common/MainTitle.styled.js","components/common/PageContainer.styled.js","hooks/useRedux.js","components/RegisterForm/RegisterForm.jsx","pages/Register/Register.jsx","validationSchem/formsSchema.js"],"sourcesContent":["import styled from \"styled-components\";\nimport { Form } from \"formik\";\n\nexport const AuthForm = styled(Form)`\n  max-width: 500px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`;","import styled from \"styled-components\";\n\nexport const ErrorText = styled.p`\n  margin-bottom: 10px;\n  font-size: 10px;\n  color: ${p => p.theme.colors.white};\n`;","import styled from \"styled-components\";\n\nexport const Input = styled.input`\n  display: block;\n  width: 100%;\n  height: 40px;\n  margin: 0 0 10px 0;\n  padding: 8px;\n  font-size: 14px;\n  background-color: ${p => p.theme.colors.white};\n  outline: none;\n  border: 2px solid #D75C78;\n  border-radius: 5px;\n`;","import styled from \"styled-components\";\n\nexport const MainTitle = styled.h1`\n  margin-bottom: 20px;\n  font-weight: ${p => p.theme.fontWeight.bold};\n  text-align: center;\n  font-size: 20px;\n`;","import styled from \"styled-components\";\n\nexport const PageContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding: 40px 0 0 0;\n`;","import { createSelectorHook, useDispatch } from \"react-redux\";\n\nexport const useRedux = () => {\n  const useSelector = createSelectorHook();\n  const dispatch = useDispatch()\n\n  return [dispatch, useSelector];\n};","import { Formik, ErrorMessage } from \"formik\";\nimport { AuthForm } from \"components/common/AuthForm.styled\";\nimport { PrimaryButton } from \"components/common/PrimaryButton.styled\";\nimport { useRedux } from \"hooks/useRedux\";\nimport { registerUser } from \"redux/authSlice\";\nimport { Navigate } from \"react-router\";\nimport { registerSchema } from \"validationSchem/formsSchema\";\nimport { ErrorText } from \"components/common/ErrorText.styled\";\nimport { Input } from \"components/common/Input.styled.\";\n\nexport const RegisterForm = () => {\n  const [dispatch] = useRedux();\n\n  const submitHandler = (values) => {\n    const user = {\n      name: values.name,\n      email: values.email,\n      password: values.password,\n    };\n    dispatch(registerUser(user));\n    <Navigate to=\"contacts\" replace={true}/>\n  };\n\n  return (\n    <Formik\n      initialValues={{ name: '', email: '', password: '' }}\n      onSubmit={submitHandler}\n      validationSchema={registerSchema}\n    >\n      {props => (\n        <AuthForm>\n          <Input\n            type=\"text\"\n            name=\"name\"\n            placeholder=\"name\"\n            onChange={props.handleChange}\n            value={props.values.name} />\n          <ErrorMessage name=\"name\" render={msg => <ErrorText>{msg}</ErrorText>} />\n          <Input\n            type=\"text\"\n            name=\"email\"\n            placeholder=\"email\"\n            onChange={props.handleChange}\n            value={props.values.email} />\n          <ErrorMessage name=\"email\" render={msg => <ErrorText>{msg}</ErrorText>} />\n          <Input\n            type=\"password\"\n            name=\"password\"\n            placeholder=\"password\"\n            onChange={props.handleChange}\n            value={props.values.password} />\n          <ErrorMessage name=\"password\" render={msg => <ErrorText>{msg}</ErrorText>} />\n          <PrimaryButton type=\"submit\">REGISTER</PrimaryButton>\n        </AuthForm>\n      )}\n    </Formik>\n  );\n};","import { PageContainer } from \"components/common/PageContainer.styled\";\nimport { MainTitle } from \"components/common/MainTitle.styled\";\nimport { RegisterForm } from \"components/RegisterForm/RegisterForm\";\n\nconst Register = () => {\n  return (\n    <PageContainer>\n      <MainTitle>For creating youre own contacts list please register</MainTitle>\n      <RegisterForm />\n    </PageContainer>\n  );\n};\n\nexport default Register;","import * as yup from 'yup';\n\nexport const contactSchema = yup.object().shape({\n  name: yup.string().min(2).required(),\n  number: yup.string().length(12).required(),\n});\n\nexport const registerSchema = yup.object().shape({\n  name: yup.string().min(2).required(),\n  email: yup.string().email().required(),\n  password: yup.string().min(4).required(),\n});\n\nexport const logSchema = yup.object().shape({\n  email: yup.string().email().required(),\n  password: yup.string().min(4).required(),\n});\n"],"names":["AuthForm","styled","Form","ErrorText","p","theme","colors","white","Input","MainTitle","fontWeight","bold","PageContainer","useRedux","useSelector","createSelectorHook","useDispatch","RegisterForm","dispatch","initialValues","name","email","password","onSubmit","values","user","registerUser","validationSchema","registerSchema","props","I","type","placeholder","onChange","handleChange","value","render","msg","contactSchema","yup","shape","min","required","number","length","logSchema"],"sourceRoot":""}