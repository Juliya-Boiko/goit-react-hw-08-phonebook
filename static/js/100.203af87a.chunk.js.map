{"version":3,"file":"static/js/100.203af87a.chunk.js","mappings":"qNAAaA,EAAW,SAAAC,GAAK,OAAIA,EAAMC,SAASC,KAAnB,E,6BCIhBC,EAAQ,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,QACtBC,GAAWC,EAAAA,EAAAA,MAejB,OACE,4BACE,kBAAMC,SAfU,SAACC,GACnBA,EAAIC,iBACJ,IAAMC,EAAOF,EAAIG,OAAOC,SAClBC,EAAU,CACdC,GAAIX,EAAKW,GACTC,KAAML,EAAKK,KAAKC,MAChBC,OAAQP,EAAKO,OAAOD,OAEtBX,GAASa,EAAAA,EAAAA,IAAiBL,IAC1BT,IACC,IACF,EAIG,WACE,kBAAOe,KAAK,OAAOJ,KAAK,OAAOK,YAAajB,EAAKY,QACjD,kBAAOI,KAAK,OAAOJ,KAAK,SAASK,YAAajB,EAAKc,UACnD,mBAAQE,KAAK,SAAb,gCAEF,mBAAQA,KAAK,SAASE,QAASjB,EAA/B,2BAKL,EC3BYkB,EAAU,SAAC,GAAc,IAAZnB,EAAW,EAAXA,KAClBE,GAAWC,EAAAA,EAAAA,MACjB,GAAsCiB,EAAAA,EAAAA,WAAS,GAA/C,eAAOC,EAAP,KAAoBC,EAApB,KAcA,OACE,2BACGtB,EAAKY,KADR,KACgBZ,EAAKc,QACnB,mBAAQE,KAAK,SAASE,QAfR,WAChBI,GAAe,EAChB,EAaG,mBACA,mBAAQN,KAAK,SAASE,QAAS,kBARbP,EAQiCX,EAAKW,QAP1DT,GAASqB,EAAAA,EAAAA,IAAmBZ,IADR,IAAAA,CAQa,EAA/B,oBACCU,IAAe,SAACtB,EAAD,CAAOC,KAAMA,EAAMC,QAbpB,WACjBqB,GAAe,EAChB,MAcF,ECvBYE,EAAe,WACxB,IAAMtB,GAAWC,EAAAA,EAAAA,MACXL,GAAQ2B,EAAAA,EAAAA,IAAY9B,GAM5B,OAJA+B,EAAAA,EAAAA,YAAU,WACRxB,GAASyB,EAAAA,EAAAA,MACV,GAAE,CAACzB,KAGF,wBACGJ,EAAM8B,KAAI,SAAC5B,GACV,OACE,yBACE,SAACmB,EAAD,CAASnB,KAAMA,KADRA,EAAKW,GAIjB,KAGN,E,UCvBYkB,EAAU,SAAC,GAAkB,IAAhBzB,EAAe,EAAfA,SACxB,OACE,SAAC,KAAD,CACE0B,cAAe,CAAElB,KAAM,GAAIE,OAAQ,IACnCV,SAAUA,EAFZ,SAIG,SAAA2B,GAAK,OACJ,UAAC,KAAD,YACE,kBAAOC,QAAQ,OAAf,mBACA,kBACErB,GAAG,OACHK,KAAK,OACLJ,KAAK,OACLqB,SAAUF,EAAMG,aAChBrB,MAAOkB,EAAMI,OAAOvB,QACtB,kBAAOoB,QAAQ,WAAf,qBACA,kBACErB,GAAG,SACHK,KAAK,OACLJ,KAAK,SACLqB,SAAUF,EAAMG,aAChBrB,MAAOkB,EAAMI,OAAOrB,UACtB,mBAAQE,KAAK,SAAb,+BAhBE,GAqBX,ECHD,EArBiB,WACf,IAAMd,GAAWC,EAAAA,EAAAA,MAWjB,OACE,4BACA,0CACE,SAAC0B,EAAD,CAASzB,SAZS,SAAC+B,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UACzB1B,EAAU,CACdE,KAAMuB,EAAOvB,KACbE,OAAQqB,EAAOrB,QAEjBZ,GAASmC,EAAAA,EAAAA,IAAmB3B,IAC5B0B,GACD,KAMG,SAACZ,EAAD,MAGL,C","sources":["redux/contacts/cont-selectors.js","components/Modal/Modal.jsx","components/Contact/Contact.jsx","components/ContactsList/ContactsList.jsx","components/AddForm/AddForm.jsx","pages/Contacts.jsx"],"sourcesContent":["export const getItems = state => state.contacts.items;","import { useDispatch } from \"react-redux\";\nimport { Navigate } from \"react-router\";\nimport { editContactAsync } from \"redux/contacts/cont-operations\";\n\nexport const Modal = ({ item, onClose }) => {\n  const dispatch = useDispatch();\n\n  const editContact = (evt) => {\n    evt.preventDefault();\n    const form = evt.target.elements;\n    const contact = {\n      id: item.id,\n      name: form.name.value,\n      number: form.number.value,\n    };\n    dispatch(editContactAsync(contact));\n    onClose();\n    <Navigate to=\"/contacts\" />\n  };\n\n  return (\n    <div>\n      <form onSubmit={editContact}>\n        <input type=\"text\" name=\"name\" placeholder={item.name} />\n        <input type=\"text\" name=\"number\" placeholder={item.number} />\n        <button type=\"submit\">UPDATE CONTACT</button>\n      </form>\n      <button type=\"button\" onClick={onClose}>\n        Close modal\n      </button>\n    </div>\n  );\n}\n\n// export const Modal = ({ onClose, src }) => {\n//   useEffect(() => {\n//     const handleKeyDown = e => {\n//       if (e.code === 'Escape') {\n//         onClose();\n//       }\n//     };\n\n//     window.addEventListener('keydown', handleKeyDown);\n//     return () => {\n//       window.removeEventListener('keydown', handleKeyDown);\n//     };\n//   }, [onClose]);\n\n//   const handleBackdropClick = e => {\n//     if (e.target === e.currentTarget) {\n//       onClose();\n//     }\n//   };\n\n//   return (\n//     <ModalBackdrop onClick={handleBackdropClick}>\n//       <ModalImg src={src} alt=\"\" />\n//     </ModalBackdrop>\n//   );\n// };","import { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { Modal } from \"components/Modal/Modal\";\nimport { deleteContactAsync } from \"redux/contacts/cont-operations\";\n\nexport const Contact = ({ item }) => { \n  const dispatch = useDispatch();\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  \n  const openModal = () => {\n    setIsModalOpen(true);\n  };\n\n  const closeModal = () => {\n    setIsModalOpen(false);\n  };\n\n  const deleteContact = id => {\n    dispatch(deleteContactAsync(id));\n  };\n\n  return (\n    <div>\n      {item.name}: {item.number}\n      <button type=\"button\" onClick={openModal}>Edit</button>\n      <button type=\"button\" onClick={() => deleteContact(item.id)}>Delete</button>\n      {isModalOpen && <Modal item={item} onClose={closeModal} />}\n    </div>\n  );\n};","import { useSelector, useDispatch } from \"react-redux\";\nimport { getAllContactsAsync } from \"redux/contacts/cont-operations\";\nimport { useEffect } from \"react\";\nimport { getItems } from \"redux/contacts/cont-selectors\";\nimport { Contact } from \"components/Contact/Contact\";\n\nexport const ContactsList = () => {\n    const dispatch = useDispatch();\n    const items = useSelector(getItems);\n\n  useEffect(() => {\n    dispatch(getAllContactsAsync());\n  }, [dispatch]);\n\n  return (\n    <ul>\n      {items.map((item) => {\n        return (\n          <li key={item.id}>\n            <Contact item={item} />\n          </li>\n        );\n      })}\n    </ul>\n  );\n};","import { Form, Formik } from \"formik\";\n\nexport const AddForm = ({ onSubmit }) => { \n  return (\n    <Formik\n      initialValues={{ name: '', number: '' }}\n      onSubmit={onSubmit}\n    >\n      {props => (\n        <Form>\n          <label htmlFor=\"name\">Name</label>\n          <input\n            id=\"name\"\n            type=\"text\"\n            name=\"name\"\n            onChange={props.handleChange}\n            value={props.values.name} />\n          <label htmlFor=\"password\">Number</label>\n          <input\n            id=\"number\"\n            type=\"text\"\n            name=\"number\"\n            onChange={props.handleChange}\n            value={props.values.number} />\n          <button type=\"submit\">ADD NEW CONTACT</button>\n        </Form>\n      )}\n    </Formik>\n  );\n};","import { ContactsList } from \"components/ContactsList/ContactsList\";\nimport { useDispatch } from \"react-redux\";\nimport { addNewContactAsync } from \"redux/contacts/cont-operations\";\nimport { AddForm } from \"components/AddForm/AddForm\";\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  \n  const submitHandler = (values, { resetForm }) => {\n    const contact = {\n      name: values.name,\n      number: values.number,\n    }\n    dispatch(addNewContactAsync(contact));\n    resetForm();\n  }\n\n  return (\n    <div>\n    <p>CONTACTS PAGE</p>\n      <AddForm onSubmit={submitHandler}/>\n      <ContactsList />\n    </div>\n  );\n};\n\nexport default Contacts;"],"names":["getItems","state","contacts","items","Modal","item","onClose","dispatch","useDispatch","onSubmit","evt","preventDefault","form","target","elements","contact","id","name","value","number","editContactAsync","type","placeholder","onClick","Contact","useState","isModalOpen","setIsModalOpen","deleteContactAsync","ContactsList","useSelector","useEffect","getAllContactsAsync","map","AddForm","initialValues","props","htmlFor","onChange","handleChange","values","resetForm","addNewContactAsync"],"sourceRoot":""}