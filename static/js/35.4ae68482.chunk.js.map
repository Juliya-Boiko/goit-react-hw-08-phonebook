{"version":3,"file":"static/js/35.4ae68482.chunk.js","mappings":"qLAEaA,E,QAAYC,GAAAA,EAAH,oF,qECATC,EAAW,WACtB,IAAMC,GAAcC,EAAAA,EAAAA,MAGpB,MAAO,EAFUC,EAAAA,EAAAA,MAECF,EACnB,C,wKCJYG,GAAUL,EAAAA,EAAAA,IAAOM,EAAAA,GAAPN,CAAH,oK,UCAPO,GAAQP,EAAAA,EAAAA,IAAOQ,EAAAA,GAAPR,CAAH,mQ,iBCOLS,EAAiB,WAC5B,OAAgCR,EAAAA,EAAAA,KAAhC,eAAOS,EAAP,KACMC,GAAQT,EADd,MAC0BU,EAAAA,IAgC1B,OACE,SAAC,KAAD,CACEC,cAAe,CAAEC,KAAM,GAAIC,OAAQ,IACnCC,SAjBkB,SAACC,EAAD,GAA4B,IARxBC,EAQOC,EAAgB,EAAhBA,UACzBC,EAAU,CACdN,MAVsBI,EAUED,EAAOH,KATVI,EACpBG,MAAM,KACNC,KAAI,SAAAC,GAAI,OAAIA,EAAK,GAAGC,cAAgBD,EAAKE,MAAM,EAAvC,IACRC,KAAK,MAONX,OAAQE,EAAOF,SAnBK,SAAAY,GACtB,IAAMC,EAAkBD,EAAKb,KAAKe,cAIlC,OAHelB,EAAMmB,MAAK,SAAAP,GAAI,OAC5BA,EAAKT,KAAKe,gBAAkBD,CADA,GAI/B,CAeKG,CAAgBX,IAIlBV,GAASsB,EAAAA,EAAAA,IAAmBZ,IAE9BD,KALEc,EAAAA,OAAAA,QAAA,UAAkBb,EAAQN,KAA1B,kBAMH,EAMGoB,iBAAkBC,EAAAA,GAHpB,SAKG,SAAAC,GAAK,OACJ,UAAC/B,EAAD,YACE,SAACE,EAAD,CACE8B,KAAK,OACLvB,KAAK,OACLwB,YAAY,OACZC,SAAUH,EAAMI,aAChBC,MAAOL,EAAMnB,OAAOH,QACtB,SAAC,KAAD,CAAcA,KAAK,OAAO4B,OAAQ,SAAAC,GAAG,OAAI,SAAC,IAAD,UAAYA,GAAhB,KACrC,SAACpC,EAAD,CACE8B,KAAK,MACLvB,KAAK,SACLwB,YAAY,SACZC,SAAUH,EAAMI,aAChBC,MAAOL,EAAMnB,OAAOF,UACtB,SAAC,KAAD,CAAcD,KAAK,SAAS4B,OAAQ,SAAAC,GAAG,OAAI,SAAC,IAAD,UAAYA,GAAhB,KACvC,SAAC,IAAD,CAAeN,KAAK,SAApB,+BAhBE,GAqBX,E,6BCnEYO,GAAW5C,EAAAA,EAAAA,IAAOM,EAAAA,GAAPN,CAAH,0FCFR6C,EAAkB7C,EAAAA,GAAAA,OAAH,iZAOlB,SAAA8C,GAAC,OAAIA,EAAEC,MAAMC,OAAOC,KAAnB,ICEEC,EAAkB,SAAC,GAAuB,IAArB3B,EAAoB,EAApBA,KAAM4B,EAAc,EAAdA,QACtC,GAAgClD,EAAAA,EAAAA,KAAhC,eAAOS,EAAP,KACMC,GAAQT,EADd,MAC0BU,EAAAA,IAUpBwC,EAAoB,SAAAlC,GACxB,IAAMmC,EAAiBnC,EACpBG,MAAM,KACNC,KAAI,SAAAC,GAAI,OAAIA,EAAK,GAAGC,cAAgBD,EAAKE,MAAM,EAAvC,IACRC,KAAK,KACR,OAAO2B,CACR,EAiBD,OACE,SAAC,KAAD,CACExC,cAAe,CAAEC,KAAMS,EAAKT,KAAMC,OAAQQ,EAAKR,QAC/CC,SAlBkB,SAACC,GACrB,IAAMG,EAAU,CACdkC,GAAI/B,EAAK+B,GACTxC,KAAMsC,EAAkBnC,EAAOH,MAC/BC,OAAQE,EAAOF,SApBK,SAAAY,GACtB,IAAMC,EAAkBD,EAAKb,KAAKe,cAC5B0B,EAAS5C,EAAMmB,MAAK,SAAAP,GAAI,OAC5BA,EAAKT,KAAKe,gBAAkBD,CADA,IAG9B,OAAO2B,CACR,CAgBKxB,CAAgBX,IAIlBV,GAAS8C,EAAAA,EAAAA,IAAiBpC,IAC1B+B,KAJAlB,EAAAA,OAAAA,QAAA,UAAkBb,EAAQN,KAA1B,kBAMH,EAMGoB,iBAAkBC,EAAAA,GAHpB,SAKG,SAAAC,GAAK,OACJ,UAACQ,EAAD,YACE,SAACrC,EAAD,CACE8B,KAAK,OACLvB,KAAK,OACLyB,SAAUH,EAAMI,aAChBC,MAAOL,EAAMnB,OAAOH,QACtB,SAAC,KAAD,CAAcA,KAAK,OAAO4B,OAAQ,SAAAC,GAAG,OAAI,SAAC,IAAD,UAAYA,GAAhB,KACrC,SAACpC,EAAD,CACE8B,KAAK,OACLvB,KAAK,SACLyB,SAAUH,EAAMI,aAChBC,MAAOL,EAAMnB,OAAOF,UACtB,SAAC,KAAD,CAAcD,KAAK,SAAS4B,OAAQ,SAAAC,GAAG,OAAI,SAAC,IAAD,UAAYA,GAAhB,KACvC,SAACE,EAAD,CAAiBR,KAAK,SAAtB,4BAdE,GAmBX,E,UCpEYoB,EAAgBzD,EAAAA,GAAAA,IAAH,kQAcb0D,EAAiB1D,EAAAA,GAAAA,IAAH,gJAQd2D,EAAmB3D,EAAAA,GAAAA,OAAH,uRAQlB,SAAA8C,GAAC,OAAIA,EAAEC,MAAMC,OAAOC,KAAnB,IASCW,GAAiB5D,EAAAA,EAAAA,IAAO6D,EAAAA,IAAP7D,CAAH,2CCrCd8D,EAAQ,SAAC,GAAuB,IAArBvC,EAAoB,EAApBA,KAAM4B,EAAc,EAAdA,SAE5BY,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAgB,SAAAC,GACL,WAAXA,EAAEC,MACJf,GAEH,EAID,OAFAgB,OAAOC,iBAAiB,UAAWJ,GAE5B,WACLG,OAAOE,oBAAoB,UAAWL,EACvC,CACF,GAAE,CAACb,IAQJ,OACE,SAACM,EAAD,CAAea,QAPW,SAAAL,GACtBA,EAAEM,SAAWN,EAAEO,eACjBrB,GAEH,EAGC,UACE,UAACO,EAAD,YACE,SAACC,EAAD,CAAkBtB,KAAK,SAASiC,QAASnB,EAAzC,UACE,SAACS,EAAD,CAAgBa,KAAK,YAEvB,SAACvB,EAAD,CAAiB3B,KAAMA,EAAM4B,QAASA,QAI7C,EAEDD,EAAgBwB,UAAY,CAC1BnD,KAAMoD,IAAAA,SAAmBA,IAAAA,QAAkBC,WAC3CzB,QAASwB,IAAAA,KAAAA,YCvCJ,I,MAAME,EAAgB7E,EAAAA,GAAAA,OAAH,2NAMf,SAAA8C,GAAC,OAAIA,EAAEC,MAAMC,OAAOC,KAAnB,I,oBCCC6B,EAAU,SAAC,GAAc,IAAZvD,EAAW,EAAXA,KACxB,GAAmBtB,EAAAA,EAAAA,KAAZS,GAAP,eACA,GAAsCqE,EAAAA,EAAAA,WAAS,GAA/C,eAAOC,EAAP,KAAoBC,EAApB,KAcA,OACE,iCACE,yBAAI1D,EAAKT,KAAT,KAAiBS,EAAKR,WACtB,4BACE,SAAC8D,EAAD,CAAexC,KAAK,SAASiC,QAhBjB,WAChBW,GAAe,EAChB,EAcK,UAAiD,SAAC,MAAD,OACjD,SAACJ,EAAD,CAAexC,KAAK,SAASiC,QAAS,kBATtBhB,EAS0C/B,EAAK+B,QARnE5C,GAASwE,EAAAA,EAAAA,IAAmB5B,IADR,IAAAA,CASsB,EAAtC,UAAoE,SAAC,MAAD,SAErE0B,IAAe,SAAClB,EAAD,CAAOvC,KAAMA,EAAM4B,QAfpB,WACjB8B,GAAe,EAChB,MAgBF,ECjCYE,EAAkBnF,EAAAA,GAAAA,GAAH,iQAKC,SAAA8C,GAAC,OAAIA,EAAEC,MAAMC,OAAOC,KAAnB,IAEnB,SAAAH,GAAC,OAAIA,EAAEC,MAAMC,OAAOC,KAAnB,IAOCmC,EAAYpF,EAAAA,GAAAA,IAAH,wFCVTqF,EAAe,WAC1B,OAAgCpF,EAAAA,EAAAA,KAAhC,eAAOS,EAAP,KACMC,GAAQT,EADd,MAC0BU,EAAAA,IAM1B,OAJAmD,EAAAA,EAAAA,YAAU,WACRrD,GAAS4E,EAAAA,EAAAA,MACV,GAAE,CAAC5E,KAGF,0BACoB,IAAjBC,EAAM4E,SAAgB,SAACH,EAAD,+EACtBzE,EAAMW,KAAI,SAACC,GACV,OACE,SAAC4D,EAAD,WACE,SAACL,EAAD,CAASvD,KAAMA,KADKA,EAAK+B,GAI9B,MAGN,ECxBYkC,EAAexF,EAAAA,GAAAA,IAAH,0MCYzB,EAViB,WAEf,OACE,UAACwF,EAAD,YACE,SAAC/E,EAAD,KACA,SAAC4E,EAAD,MAGL,C,sHCVYlD,EAAgBsD,EAAAA,KAAaC,MAAM,CAC9C5E,KAAM2E,EAAAA,KAAaE,IAAI,GAAGC,WAC1B7E,OAAQ0E,EAAAA,KAAaF,OAAO,GAAGK,aAGpBC,EAAiBJ,EAAAA,KAAaC,MAAM,CAC/C5E,KAAM2E,EAAAA,KAAaE,IAAI,GAAGC,WAC1BE,MAAOL,EAAAA,KAAaK,MAAM,yBAAyBF,WACnDG,SAAUN,EAAAA,KAAaE,IAAI,GAAGC,aAGnBI,EAAYP,EAAAA,KAAaC,MAAM,CAC1CI,MAAOL,EAAAA,KAAaK,QAAQF,WAC5BG,SAAUN,EAAAA,KAAaE,IAAI,GAAGC,Y","sources":["components/common/ErrorText.styled.js","hooks/useRedux.js","components/AddContactForm/AddContactForm.styled.js","components/common/Input.styled..js","components/AddContactForm/AddContactForm.jsx","components/EditContactForm/EditContactForm.styled.js","components/common/SecondaryButton.js","components/EditContactForm/EditContactForm.jsx","components/Modal/Modal.styled.js","components/Modal/Modal.jsx","components/Contact/Contact.styled.js","components/Contact/Contact.jsx","components/ContactsList/ContactsList.styled.js","components/ContactsList/ContactsList.jsx","pages/Contacts/Contacts.styled.js","pages/Contacts/Contacts.jsx","validationSchem/formsSchema.js"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const ErrorText = styled.p`\n  margin-bottom: 10px;\n  font-size: 10px;\n  color: white;\n`;","import { createSelectorHook, useDispatch } from \"react-redux\";\n\nexport const useRedux = () => {\n  const useSelector = createSelectorHook();\n  const dispatch = useDispatch()\n\n  return [dispatch, useSelector];\n};","import styled from \"styled-components\";\nimport { Form } from \"formik\";\n\nexport const AddForm = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  max-width: 200px;\n\n  @media screen and (max-width: 640px) {\n    margin: 0 0 30px 0;\n  }\n`;\n","import styled from \"styled-components\";\nimport { Field } from \"formik\";\n\nexport const Input = styled(Field)`\n  display: block;\n  width: 100%;\n  margin: 0 0 10px 0;\n  padding: 8px;\n  background-color: #F3F3F3;\n  outline: none;\n  border: 2px solid #D75C78;\n  box-shadow: inset 0px 0px 20px -1px rgba(0, 0, 0, 0.5);\n  border-radius: 5px;\n`;","import { Notify } from \"notiflix\";\nimport { Formik, ErrorMessage } from \"formik\";\nimport { getItems, addNewContactAsync } from \"redux/contactsSlice\";\nimport { useRedux } from \"hooks/useRedux\";\nimport { contactSchema } from \"validationSchem/formsSchema\";\nimport { AddForm } from \"./AddContactForm.styled\";\nimport { ErrorText } from \"components/common/ErrorText.styled\";\nimport { Input } from \"components/common/Input.styled.\";\nimport { PrimaryButton } from \"components/common/PrimaryButton.styled\";\n\nexport const AddContactForm = () => { \n  const [dispatch, useSelector] = useRedux();\n  const items = useSelector(getItems);\n\n  const validateContact = data => {\n    const normalizedValue = data.name.toLowerCase();\n    const result = items.find(item =>\n      item.name.toLowerCase() === normalizedValue\n    );\n    return result;\n  };\n\n  const normalizedContact = str => {\n    const normalizedName = str\n      .split(' ')\n      .map(item => item[0].toUpperCase() + item.slice(1))\n      .join(' ');\n    return normalizedName;\n  };\n\n  const submitHandler = (values, { resetForm }) => {\n    const contact = {\n      name: normalizedContact(values.name),\n      number: values.number,\n    }\n    if (validateContact(contact)) {\n      Notify.failure(`${contact.name} already exist`);\n      return;\n    } else {\n      dispatch(addNewContactAsync(contact));\n    }\n    resetForm();\n  };\n  \n  return (\n    <Formik\n      initialValues={{ name: '', number: '' }}\n      onSubmit={submitHandler}\n      validationSchema={contactSchema}\n    >\n      {props => (\n        <AddForm>\n          <Input\n            type=\"text\"\n            name=\"name\"\n            placeholder=\"name\"\n            onChange={props.handleChange}\n            value={props.values.name} />\n          <ErrorMessage name=\"name\" render={msg => <ErrorText>{msg}</ErrorText>} />\n          <Input\n            type=\"tel\"\n            name=\"number\"\n            placeholder=\"number\"\n            onChange={props.handleChange}\n            value={props.values.number} />\n          <ErrorMessage name=\"number\" render={msg => <ErrorText>{msg}</ErrorText>} />\n          <PrimaryButton type=\"submit\">ADD NEW CONTACT</PrimaryButton>\n        </AddForm>\n      )}\n    </Formik>\n  );\n};","\nimport styled from \"styled-components\";\nimport { Form } from \"formik\";\n\nexport const EditForm = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  max-width: 200px;\n`;","import styled from \"styled-components\";\n\nexport const SecondaryButton = styled.button`\n\tdisplay: block;\n\tpadding: 5px 20px;\n\tborder: none;\n\tborder-radius: 2px;\n\toutline: none;\n\tbackground-color: #D45B78;\n\tcolor: ${p => p.theme.colors.white};\n\tcursor: pointer;\n  \ttransition: all 250ms ease-in-out;\n\n\t@media screen and (max-width: 425px) {\n\t\tpadding: 3px 10px;\n\t\tfont-size: 9px;\n\t}\n\n\t&:hover {\n\t\tbox-shadow: 5px 5px 18px -3px rgba(255,255,255,0.67);\n\t}\n`;","import PropTypes from 'prop-types';\nimport { Notify } from \"notiflix\";\nimport { Formik, ErrorMessage } from \"formik\";\nimport { useRedux } from \"hooks/useRedux\";\nimport { editContactAsync, getItems } from \"redux/contactsSlice\";\nimport { contactSchema } from \"validationSchem/formsSchema\";\nimport { EditForm } from \"./EditContactForm.styled\";\nimport { Input } from \"components/common/Input.styled.\";\nimport { ErrorText } from \"components/common/ErrorText.styled\";\nimport { SecondaryButton } from \"components/common/SecondaryButton\";\n\nexport const EditContactForm = ({ item, onClose }) => {\n  const [dispatch, useSelector] = useRedux();\n  const items = useSelector(getItems);\n\n  const validateContact = data => {\n    const normalizedValue = data.name.toLowerCase();\n    const result = items.find(item =>\n      item.name.toLowerCase() === normalizedValue\n    );\n    return result;\n  };\n\n  const normalizedContact = str => {\n    const normalizedName = str\n      .split(' ')\n      .map(item => item[0].toUpperCase() + item.slice(1))\n      .join(' ');\n    return normalizedName;\n  };\n\n  const submitHandler = (values) => {\n    const contact = {\n      id: item.id,\n      name: normalizedContact(values.name),\n      number: values.number,\n    };\n    if (validateContact(contact)) {\n      Notify.failure(`${contact.name} already exist`);\n      return;\n    } else {\n      dispatch(editContactAsync(contact));\n      onClose();\n    }\n  };\n  \n  return (\n    <Formik\n      initialValues={{ name: item.name, number: item.number }}\n      onSubmit={submitHandler}\n      validationSchema={contactSchema}\n    >\n      {props => (\n        <EditForm>\n          <Input\n            type=\"text\"\n            name=\"name\"\n            onChange={props.handleChange}\n            value={props.values.name} />\n          <ErrorMessage name=\"name\" render={msg => <ErrorText>{msg}</ErrorText>} />\n          <Input\n            type=\"text\"\n            name=\"number\"\n            onChange={props.handleChange}\n            value={props.values.number} />\n          <ErrorMessage name=\"number\" render={msg => <ErrorText>{msg}</ErrorText>} />\n          <SecondaryButton type=\"submit\">EDIT CONTACT</SecondaryButton>\n        </EditForm>\n      )}\n    </Formik>\n  );\n};\n\nEditContactForm.propTypes = {\n  item: PropTypes.objectOf(PropTypes.string).isRequired,\n  onClose: PropTypes.func.isRequired,\n}","import styled from \"styled-components\";\nimport { RiCloseFill } from \"react-icons/ri\";\n\nexport const ModalBackdrop = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  background-color: rgba(0, 0, 0, 0.8);\n  z-index: 1200;\n`;\n\nexport const ModalContainer = styled.div`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const CloseModalButton = styled.button`\n  position: absolute;\n  top: -40px;\n  right: -40px;\n  padding: 5px;\n  border: none;\n  outline: none;\n  background-color: transparent;\n  color: ${p => p.theme.colors.white};\n  cursor: pointer;\n  transition: all 250ms ease-in-out;\n\n  &:hover {\n    color: #D45B78;\n  }\n`;\n\nexport const CloseModalIcon = styled(RiCloseFill)`\n  color: inherit;\n`;\n","import PropTypes from 'prop-types';\nimport { useEffect } from \"react\";\nimport { EditContactForm } from \"components/EditContactForm/EditContactForm\";\nimport { ModalBackdrop, ModalContainer, CloseModalButton, CloseModalIcon } from \"./Modal.styled\";\n\nexport const Modal = ({ item, onClose }) => {\n\n  useEffect(() => {\n    const handleKeyDown = e => {\n      if (e.code === 'Escape') {\n        onClose();\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [onClose]);\n\n  const handleBackdropClick = e => {\n    if (e.target === e.currentTarget) {\n      onClose();\n    }\n  };\n\n  return (\n    <ModalBackdrop onClick={handleBackdropClick}>\n      <ModalContainer>\n        <CloseModalButton type=\"button\" onClick={onClose}>\n          <CloseModalIcon size=\"30px\" />\n        </CloseModalButton>\n        <EditContactForm item={item} onClose={onClose} />\n      </ModalContainer>\n    </ModalBackdrop>\n  );\n};\n\nEditContactForm.propTypes = {\n  item: PropTypes.objectOf(PropTypes.string).isRequired,\n  onClose: PropTypes.func.isRequired,\n}","import styled from \"styled-components\";\n\nexport const ContactButton = styled.button`\n  display: inline-block;\n  margin: 0 7px;\n  padding: 3px;\n  border: none;\n  background-color: transparent;\n  color: ${p => p.theme.colors.white};\n  cursor: pointer;\n\n  &:focus-visible {\n    outline: none;\n  }\n`;","import PropTypes from 'prop-types';\nimport { useState } from \"react\";\nimport { useRedux } from \"hooks/useRedux\";\nimport { deleteContactAsync } from \"redux/contactsSlice\";\nimport { Modal } from \"components/Modal/Modal\";\nimport { ContactButton } from \"./Contact.styled\";\nimport { FiEdit2 } from \"react-icons/fi\";\nimport { AiOutlineDelete } from \"react-icons/ai\";\n\nexport const Contact = ({ item }) => { \n  const [dispatch] = useRedux();\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  \n  const openModal = () => {\n    setIsModalOpen(true); \n  };\n\n  const closeModal = () => {\n    setIsModalOpen(false);\n  };\n\n  const deleteContact = id => {\n    dispatch(deleteContactAsync(id));\n  };\n\n  return (\n    <>\n      <p>{item.name}: {item.number}</p>\n      <div>\n        <ContactButton type=\"button\" onClick={openModal}><FiEdit2 /></ContactButton>\n        <ContactButton type=\"button\" onClick={() => deleteContact(item.id)}><AiOutlineDelete /></ContactButton>\n      </div>\n      {isModalOpen && <Modal item={item} onClose={closeModal} />}\n    </>\n  );\n};\n\nContact.propTypes = {\n  item: PropTypes.objectOf(PropTypes.string).isRequired,\n}","import styled from \"styled-components\";\n\nexport const ContactListItem = styled.li`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 4px;\n  border-bottom: 1px solid ${p => p.theme.colors.white};\n  font-size: 20px;\n  color: ${p => p.theme.colors.white};\n\n  @media screen and (max-width: 640px) {\n    font-size: 14px;\n  }\n`;\n\nexport const EmptyList = styled.div`\n  max-width: 200px;\n  text-align: center;\n  font-size: 14px;\n`;","import { useEffect } from \"react\";\nimport { useRedux } from \"hooks/useRedux\";\nimport { getItems, getAllContactsAsync } from \"redux/contactsSlice\";\nimport { Contact } from \"components/Contact/Contact\";\nimport { ContactListItem, EmptyList } from \"./ContactsList.styled\";\n\nexport const ContactsList = () => {\n  const [dispatch, useSelector] = useRedux();\n  const items = useSelector(getItems);\n\n  useEffect(() => {\n    dispatch(getAllContactsAsync());\n  }, [dispatch]);\n\n  return (\n    <ul>\n      {items.length === 0 && <EmptyList>Now youre contacts list is empty. Just enter new contact in form</EmptyList>}\n      {items.map((item) => {\n        return (\n          <ContactListItem key={item.id}>\n            <Contact item={item} />\n          </ContactListItem>\n        );\n      })}\n    </ul>\n  );\n};","import styled from \"styled-components\";\n\nexport const ContactsPage = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-around;\n  padding: 40px 0 0 0;\n\n  @media screen and (max-width: 640px) {\n    flex-direction: column;\n  }\n`;","import { AddContactForm } from \"components/AddContactForm/AddContactForm\";\nimport { ContactsList } from \"components/ContactsList/ContactsList\";\nimport { ContactsPage } from \"./Contacts.styled\";\n\nconst Contacts = () => {\n\n  return (\n    <ContactsPage>\n      <AddContactForm />\n      <ContactsList />\n    </ContactsPage>\n  );\n};\n\nexport default Contacts;","import * as yup from 'yup';\n\nexport const contactSchema = yup.object().shape({\n  name: yup.string().min(2).required(),\n  number: yup.string().length(7).required(),\n});\n\nexport const registerSchema = yup.object().shape({\n  name: yup.string().min(2).required(),\n  email: yup.string().email('must be a valid email').required(),\n  password: yup.string().min(4).required(),\n});\n\nexport const logSchema = yup.object().shape({\n  email: yup.string().email().required(),\n  password: yup.string().min(4).required(),\n});\n"],"names":["ErrorText","styled","useRedux","useSelector","createSelectorHook","useDispatch","AddForm","Form","Input","Field","AddContactForm","dispatch","items","getItems","initialValues","name","number","onSubmit","values","str","resetForm","contact","split","map","item","toUpperCase","slice","join","data","normalizedValue","toLowerCase","find","validateContact","addNewContactAsync","Notify","validationSchema","contactSchema","props","type","placeholder","onChange","handleChange","value","render","msg","EditForm","SecondaryButton","p","theme","colors","white","EditContactForm","onClose","normalizedContact","normalizedName","id","result","editContactAsync","ModalBackdrop","ModalContainer","CloseModalButton","CloseModalIcon","RiCloseFill","Modal","useEffect","handleKeyDown","e","code","window","addEventListener","removeEventListener","onClick","target","currentTarget","size","propTypes","PropTypes","isRequired","ContactButton","Contact","useState","isModalOpen","setIsModalOpen","deleteContactAsync","ContactListItem","EmptyList","ContactsList","getAllContactsAsync","length","ContactsPage","yup","shape","min","required","registerSchema","email","password","logSchema"],"sourceRoot":""}