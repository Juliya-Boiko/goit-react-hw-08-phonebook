{"version":3,"file":"static/js/386.e9efd2d0.chunk.js","mappings":"sLAEaA,E,QAAYC,GAAAA,EAAH,oF,qECATC,EAAW,WACtB,IAAMC,GAAcC,EAAAA,EAAAA,MAGpB,MAAO,EAFUC,EAAAA,EAAAA,MAECF,EACnB,C,8JCJYG,GAAaL,EAAAA,EAAAA,IAAOM,EAAAA,GAAPN,CAAH,yHAOVO,GAAaP,EAAAA,EAAAA,IAAOQ,EAAAA,GAAPR,CAAH,mP,2BCDVS,EAAY,WACvB,OAAmBR,EAAAA,EAAAA,KAAZS,GAAP,eAWA,OACE,SAAC,KAAD,CACEC,cAAe,CAAEC,MAAO,GAAIC,SAAU,IACtCC,SAZkB,SAACC,GACrB,IAAMC,EAAO,CACXJ,MAAOG,EAAOH,MACdC,SAAUE,EAAOF,UAEnBH,GAASO,EAAAA,EAAAA,IAAUD,IAClB,IACF,EAMGE,iBAAkBC,EAAAA,GAHpB,SAKG,SAAAC,GAAK,OACJ,UAACf,EAAD,YACE,SAACE,EAAD,CACEc,KAAK,OACLC,KAAK,QACLC,YAAY,QACZC,SAAUJ,EAAMK,aAChBC,MAAON,EAAML,OAAOH,SACtB,SAAC,KAAD,CAAcU,KAAK,QAAQK,OAAQ,SAAAC,GAAG,OAAI,SAAC,IAAD,UAAYA,GAAhB,KACtC,SAACrB,EAAD,CACEc,KAAK,WACLC,KAAK,WACLC,YAAY,WACZC,SAAUJ,EAAMK,aAChBC,MAAON,EAAML,OAAOF,YACtB,SAAC,KAAD,CAAcS,KAAK,WAAWK,OAAQ,SAAAC,GAAG,OAAI,SAAC,IAAD,UAAYA,GAAhB,KACzC,SAAC,IAAD,CAAeP,KAAK,SAApB,sBAhBE,GAqBX,EC9CYQ,EAAY7B,EAAAA,GAAAA,IAAH,iJAQT8B,EAAa9B,EAAAA,GAAAA,GAAH,4SAEN,SAAA+B,GAAC,OAAIA,EAAEC,MAAMC,WAAWC,IAAvB,IAEP,SAAAH,GAAC,OAAIA,EAAEC,MAAMG,OAAOC,KAAnB,ICFZ,EATc,WACZ,OACE,UAACP,EAAD,YACE,SAACC,EAAD,0DACA,SAACrB,EAAD,MAGL,C,sHCRY4B,EAAgBC,EAAAA,KAAaC,MAAM,CAC9CjB,KAAMgB,EAAAA,KAAaE,IAAI,GAAGC,WAC1BC,OAAQJ,EAAAA,KAAaK,OAAO,GAAGF,aAGpBG,EAAiBN,EAAAA,KAAaC,MAAM,CAC/CjB,KAAMgB,EAAAA,KAAaE,IAAI,GAAGC,WAC1B7B,MAAO0B,EAAAA,KAAa1B,MAAM,yBAAyB6B,WACnD5B,SAAUyB,EAAAA,KAAaE,IAAI,GAAGC,aAGnBtB,EAAYmB,EAAAA,KAAaC,MAAM,CAC1C3B,MAAO0B,EAAAA,KAAa1B,QAAQ6B,WAC5B5B,SAAUyB,EAAAA,KAAaE,IAAI,GAAGC,Y","sources":["components/common/ErrorText.styled.js","hooks/useRedux.js","components/LoginForm/LoginForm.styled.js","components/LoginForm/LoginForm.jsx","pages/Login/Login.styled.js","pages/Login/Login.jsx","validationSchem/formsSchema.js"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const ErrorText = styled.p`\n  margin-bottom: 10px;\n  font-size: 10px;\n  color: white;\n`;","import { createSelectorHook, useDispatch } from \"react-redux\";\n\nexport const useRedux = () => {\n  const useSelector = createSelectorHook();\n  const dispatch = useDispatch()\n\n  return [dispatch, useSelector];\n};","import styled from \"styled-components\";\nimport { Form, Field } from \"formik\";\n\nexport const LoginFormm = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`;\n\nexport const LoginInput = styled(Field)`\n  display: block;\n  margin: 0 0 10px 0;\n  padding: 8px;\n  background-color: #F3F3F3;\n  outline: none;\n  border: 2px solid #D75C78;\n  box-shadow: inset 0px 0px 20px -1px rgba(0, 0, 0, 0.5);\n  border-radius: 5px;\n`;\n","import { Formik, ErrorMessage } from \"formik\";\nimport { loginUser } from \"redux/authSlice\";\nimport { useRedux } from \"hooks/useRedux\";\nimport { Navigate } from \"react-router\";\nimport { logSchema } from \"validationSchem/formsSchema\";\nimport { LoginFormm, LoginInput } from \"./LoginForm.styled\";\nimport { PrimaryButton } from \"components/common/PrimaryButton.styled\";\nimport { ErrorText } from \"components/common/ErrorText.styled\";\n\nexport const LoginForm = () => {\n  const [dispatch] = useRedux();\n\n  const submitHandler = (values) => {\n    const user = {\n      email: values.email,\n      password: values.password,\n    };\n    dispatch(loginUser(user));\n    <Navigate to=\"contacts\" replace={true} />\n  };\n\n  return (\n    <Formik\n      initialValues={{ email: '', password: '' }}\n      onSubmit={submitHandler}\n      validationSchema={logSchema}\n    >\n      {props => (\n        <LoginFormm>\n          <LoginInput\n            type=\"text\"\n            name=\"email\"\n            placeholder=\"email\"\n            onChange={props.handleChange}\n            value={props.values.email} />\n          <ErrorMessage name=\"email\" render={msg => <ErrorText>{msg}</ErrorText>} />\n          <LoginInput\n            type=\"password\"\n            name=\"password\"\n            placeholder=\"password\"\n            onChange={props.handleChange}\n            value={props.values.password} />\n          <ErrorMessage name=\"password\" render={msg => <ErrorText>{msg}</ErrorText>} />\n          <PrimaryButton type=\"submit\">LOG IN</PrimaryButton>\n        </LoginFormm>\n      )}\n    </Formik>\n  );\n};","import styled from \"styled-components\";\n\nexport const LoginPage = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding: 40px 0 0 0;\n`;\n\nexport const LoginTitle = styled.h1`\n  margin-bottom: 20px;\n  font-weight: ${p => p.theme.fontWeight.bold};\n  text-align: center;\n  color: ${p => p.theme.colors.white};\n  font-size: 20px;\n\n  /* @media screen and (min-width: 768px) and (max-width: 1199px) {\n    font-size: 30px;\n  }\n\n  @media screen and (min-width: 1200px) {\n    font-size: 40px;\n  } */\n`;","import { LoginForm } from \"components/LoginForm/LoginForm\";\nimport { LoginPage, LoginTitle } from \"./Login.styled\";\n\nconst Login = () => {\n  return (\n    <LoginPage>\n      <LoginTitle>If you already have account, please log in</LoginTitle>\n      <LoginForm />\n    </LoginPage>\n  );\n};\n\nexport default Login;","import * as yup from 'yup';\n\nexport const contactSchema = yup.object().shape({\n  name: yup.string().min(2).required(),\n  number: yup.string().length(7).required(),\n});\n\nexport const registerSchema = yup.object().shape({\n  name: yup.string().min(2).required(),\n  email: yup.string().email('must be a valid email').required(),\n  password: yup.string().min(4).required(),\n});\n\nexport const logSchema = yup.object().shape({\n  email: yup.string().email().required(),\n  password: yup.string().min(4).required(),\n});\n"],"names":["ErrorText","styled","useRedux","useSelector","createSelectorHook","useDispatch","LoginFormm","Form","LoginInput","Field","LoginForm","dispatch","initialValues","email","password","onSubmit","values","user","loginUser","validationSchema","logSchema","props","type","name","placeholder","onChange","handleChange","value","render","msg","LoginPage","LoginTitle","p","theme","fontWeight","bold","colors","white","contactSchema","yup","shape","min","required","number","length","registerSchema"],"sourceRoot":""}